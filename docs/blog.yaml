/api/v1/blogs:
  post:
    summary: create new blog
    tags: [blog routes]
    requestBody:
      description: please fill all required fields
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateBlogInput'
    responses:
      '201':
        description: Created

  get:
    tags: [blog routes]
    description: <p>returns all blogs from our database</p> (you can also add query to filter your blogs <strong>/api/v1/blogs?sort=created_at:asc&limit=10&offset=0&search=javascript&fields=title,body,banner</strong>)<h3>sorting </h3><p> ascending <strong>/api/v1/blogs?sort=created_at:asc</strong></p><p>descending <strong>/api/v1/blogs?sort=created_at:desc</strong></p><p> <h3>return fields</h3><p>you may not need all fields filter what you need</p><p><strong>/api/v1/blogs?fields=title,body,banner</strong></p><h3>limit the number of blogs</h3><p>limit the length of the response (number of blogs)</p><p><strong>/api/v1/blogs?limit=10</strong></p>[those queries are optional put them according to your choise, add more as shown above]</p>
    responses:
      200:
        description: blogs get all blogs from our api

/api/v1/blogs/{blogId}:
  delete:
    tags: [blog routes]
    summary: deleting a one blog, should provide blogId from our database
    parameters:
      - name: blogId
        in: path
        description: provide blogId
        required: true
    responses:
      200:
        description: success
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/blog'
      404:
        description: not found
  put:
    summary: update a blog post only admin can update
    tags: [blog routes]
    parameters:
      - name: blogId
        in: path
        description: provide blogId
        required: true
    requestBody:
      description: please fill all required fields
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateBlogInput'
    responses:
      '201':
        description: Created successfuly

  get:
    tags: [blog routes]
    summary: returns a one blog should provide blogId from our database
    parameters:
      - name: blogId
        in: path
        description: provide blogId
        required: true
    responses:
      200:
        description: success
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/blog'
      404:
        description: not found

/api/v1/blogs/{blogId}/likes:
  get:
    summary: get all likes of a blog
    tags: [blog routes]
    parameters:
      - name: blogId
        in: path
        description: provide blogId
        required: true
    responses:
      '201':
        description: all likes likes for this blog sent successfuly

  post:
    summary: likes a blog login is required first
    tags: [blog routes]
    parameters:
      - name: blogId
        in: path
        description: provide blogId
        required: true
    responses:
      '201':
        description: liked successfuly

/api/v1/blogs/{blogId}/comments:
  post:
    summary: update a blog post only admin can update
    tags: [blog routes]
    parameters:
      - name: blogId
        in: path
        description: provide blogId
        required: true
    requestBody:
      description: please fill all required fields
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommentBlogInput'
    responses:
      '201':
        description: Commented successfuly

/api/v1/blogs/{blogId}/comments/{commentId}/likes:
  post:
    summary: like a comment on a blog, login is required first
    tags: [blog routes]
    parameters:
      - name: blogId
        in: path
        description: provide blogId
        required: true
      - name: commentId
        in: path
        description: provide commentId
        required: true
    responses:
      '201':
        description: Commented successfuly

/api/v1/blogs/{blogId}/comments/{commentId}:
  delete:
    summary: delete a comment on a blog, login is required with admin credentials first
    tags: [blog routes]
    parameters:
      - name: blogId
        in: path
        description: provide blogId
        required: true
      - name: commentId
        in: path
        description: provide commentId
        required: true
    responses:
      '201':
        description: Commented successfuly
